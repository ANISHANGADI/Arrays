Fractional Knapsack
MediumAccuracy: 32.46%Submissions: 137K+Points: 4
Register NOW for the latest GFG Job-a-thon: Hiring Challenge !!  

Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

 

Example 1:

Input:
N = 3, W = 50
values[] = {60,100,120}
weight[] = {10,20,30}
Output:
240.00
Explanation:Total maximum value of item
we can have is 240.00 from the given
capacity of sack. 
Example 2:

Input:
N = 2, W = 50
values[] = {60,100}
weight[] = {10,20}
Output:
160.00
Explanation:
Total maximum value of item
we can have is 160.00 from the given
capacity of sack.
 

Your Task :
Complete the function fractionalKnapsack() that receives maximum capacity , array of structure/class and size n and returns a double value representing the maximum value in knapsack.
Note: The details of structure/class is defined in the comments above the given function.


Expected Time Complexity : O(NlogN)
Expected Auxilliary Space: O(1)
bool comp(Item i1,Item i2)
{
    double unit1= (i1.value*1.0)/(i1.weight);
    double unit2=(i2.value*1.0)/(i2.weight);
    return (unit1>unit2);
}
class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        sort(arr,arr+n,comp);
        double ans=0;
        for(int i=0;i<n;i++)
        {   
            
            if(arr[i].weight>=W)
            {
                double frac=(arr[i].value*1.0)/(arr[i].weight);
                ans+=W*frac;
                break;
            }
            ans+=arr[i].value;
            W-=arr[i].weight;
        }
        return ans;
        
    }
        
};

