Given an array Arr of size N such that each element is from the range 0 to 9. Find the minimum possible sum of two numbers formed using the elements of the array. All digits in the given array must be used to form the two numbers.


Example 1:

Input:
N = 6
Arr[] = {6, 8, 4, 5, 2, 3}
Output: 604
Explanation: The minimum sum is formed 
by numbers 358 and 246.

Example 2:

Input:
N = 5
Arr[] = {5, 3, 0, 7, 4}
Output: 82
Explanation: The minimum sum is 
formed by numbers 35 and 047.

Your Task:
You don't need to read input or print anything. Your task is to complete the function solve() which takes arr[] and n as input parameters and returns the minimum possible sum. As the number can be large, return string presentation of the number without leading zeroes.



string sumof(string s1,string s2)
    {
        int i=s1.size()-1;
        int j=s2.size()-1;
        int carry=0;
        string sum="";
        while(i>=0 && j>=0)
        {
            int d1=s1[i]-'0';
            int d2=s2[j]-'0';
            sum=to_string((d1+d2+carry)%10)+sum;
            carry=(d1+d2+carry)/10;
            i--;
            j--;
        }
         while(i>=0)
        {
            int d1=s1[i]-'0';
            sum=to_string((d1+carry)%10)+sum;
            carry=(d1+carry)/10;
            i--;
        }
         while(j>=0)
        {
            int d2=s2[j]-'0';
            sum=to_string((d2+carry)%10)+sum;
            carry=(d2+carry)/10;
            j--;
        }
        if(carry!=0)
            sum=to_string(carry)+sum;
        for(int i=0;i<sum.size();i++)
        {
            if(sum[i]!='0')
                return sum.substr(i);
        }
        return "0";
    }
    string solve(int arr[], int n) {
        // code here
        sort(arr,arr+n);
        string s1="";
        string s2="";
        for(int i=0;i<n;i++)
        {
            if(i%2==0)
            {
                s1+=to_string(arr[i]);
            }
            else
            {
                s2+=to_string(arr[i]);
            }
        }
        return sumof(s1,s2);
    }
